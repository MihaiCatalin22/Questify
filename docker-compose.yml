name: questify

services:
  backend:
    build:
      context: ./QuestifyBE
      dockerfile: Dockerfile
      args: { SKIP_TESTS: "true" }
    image: questify/backend:dev
    container_name: questify-backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      # --- DB ---
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/questify?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: questify
      SPRING_DATASOURCE_PASSWORD: questifypw
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # --- Redis ---
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      # --- MinIO / S3 (HTTP for local dev) ---
      S3_ENDPOINT: http://minio:9000
      AWS_REGION: us-east-1
      BUCKET_NAME: questify
      AWS_ACCESS_KEY_ID: questify
      AWS_SECRET_ACCESS_KEY: questifysecret
      S3_USE_PATH_STYLE: "true"
      PUBLIC_BASE_URL: /s3/questify
    ports: ["8081:8080"]
    depends_on:
      mysql: { condition: service_healthy }
      redis: { condition: service_healthy }
      minio: { condition: service_healthy }
      minio-init: { condition: service_completed_successfully }
    restart: unless-stopped

  frontend:
    build:
      context: ./QuestifyFE
      dockerfile: Dockerfile
    image: questify/frontend:dev
    container_name: questify-frontend
    ports: ["5173:8443"]
    volumes: 
      - ./QuestifyFE/infra/frontend/certs:/etc/nginx/certs:ro
    depends_on:
      backend: { condition: service_started }
    restart: unless-stopped

  mysql:
    image: mysql:8.4
    container_name: questify-mysql
    environment:
      MYSQL_DATABASE: questify
      MYSQL_USER: questify
      MYSQL_PASSWORD: questifypw
      MYSQL_ROOT_PASSWORD: root
    ports: ["3307:3306"]
    volumes: [ "mysql_data:/var/lib/mysql" ]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$${MYSQL_USER} -p$${MYSQL_PASSWORD} --silent"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: questify-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6380:6379"]
    volumes: [ "redis_data:/data" ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: questify-minio
    hostname: minio
    environment:
      MINIO_ROOT_USER: questify
      MINIO_ROOT_PASSWORD: questifysecret
    command: server /data --console-address ":9001"
    # HTTP only (no cert mount)
    ports:
      - "9002:9000"   # API (HTTP)
      - "9003:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 3s
      timeout: 3s
      retries: 60
    restart: unless-stopped

  minio-init:
    image: minio/mc:latest
    container_name: questify-minio-init
    depends_on:
      minio: { condition: service_healthy }
    environment:
      MINIO_ROOT_USER: questify
      MINIO_ROOT_PASSWORD: questifysecret
    entrypoint: |
      /bin/sh -eu
      echo "Waiting for MinIO @ http://minio:9000"
      until mc alias set local http://minio:9000 "$${MINIO_ROOT_USER}" "$${MINIO_ROOT_PASSWORD}" >/dev/null 2>&1; do
        echo "MinIO not ready yet..."; sleep 2
        mc alias rm local >/dev/null 2>&1 || true
      done
      echo "MinIO is ready. Creating bucket and applying CORS..."
      mc mb -p local/questify || true
      # Optional: CORS (adjust if you actually need it)
      cat >/tmp/cors.json <<'JSON'
      {"CORSRules":[{"AllowedOrigins":["*"],"AllowedMethods":["GET","PUT","POST","DELETE","HEAD"],"AllowedHeaders":["*"],"ExposeHeaders":["ETag"],"MaxAgeSeconds":3600}]}
      JSON
      mc anonymous set-json --file /tmp/cors.json local/questify || true
      echo "questify bucket ensured + CORS set"
    restart: "no"

volumes:
  mysql_data:
  redis_data:
  minio_data:
